{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///C:/xampp/htdocs/MediAlert/src/lib/firebase.ts"],"sourcesContent":["import { initializeApp, getApps, getApp } from \"firebase/app\";\nimport { getDatabase } from \"firebase/database\";\n\nconst firebaseConfig = {\n  \"projectId\": \"medialert-e4fb1\",\n  \"appId\": \"1:283289786918:web:d5a9032303a27c8acde4e7\",\n  \"storageBucket\": \"medialert-e4fb1.appspot.com\",\n  \"apiKey\": \"AIzaSyDDaSb0me3e7aERf8DPyKNS3gd0UvQ2NAA\",\n  \"authDomain\": \"medialert-e4fb1.firebaseapp.com\",\n  \"databaseURL\": \"https://medialert-e4fb1-default-rtdb.firebaseio.com/\",\n  \"messagingSenderId\": \"283289786918\",\n  \"measurementId\": \"G-MEASUREMENT_ID\"\n};\n\nconst app = !getApps().length ? initializeApp(firebaseConfig) : getApp();\nconst db = getDatabase(app);\n\nexport { db, app };\n"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;AAAA;;;AAEA,MAAM,iBAAiB;IACrB,aAAa;IACb,SAAS;IACT,iBAAiB;IACjB,UAAU;IACV,cAAc;IACd,eAAe;IACf,qBAAqB;IACrB,iBAAiB;AACnB;AAEA,MAAM,MAAM,CAAC,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,GAAG,CAAA,GAAA,oLAAA,CAAA,gBAAa,AAAD,EAAE,kBAAkB,CAAA,GAAA,oLAAA,CAAA,SAAM,AAAD;AACrE,MAAM,KAAK,CAAA,GAAA,qLAAA,CAAA,cAAW,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":["file:///C:/xampp/htdocs/MediAlert/src/app/actions.ts"],"sourcesContent":["'use server';\n\nimport { db } from '@/lib/firebase';\nimport { get, ref, child, remove } from 'firebase/database';\nimport type { Event, EventFromFirestore } from '@/lib/types';\n\nexport async function getEvents(): Promise<Event[]> {\n    console.log(\"Attempting to fetch events from Realtime Database...\");\n    try {\n        const dbRef = ref(db);\n\n        const [dispenseSnapshot, reminderSnapshot] = await Promise.all([\n            get(child(dbRef, 'dispense_events')),\n            get(child(dbRef, 'reminders'))\n        ]);\n\n        const events: Event[] = [];\n\n        if (dispenseSnapshot.exists()) {\n            const dispenseData = dispenseSnapshot.val();\n            console.log(`Fetched ${Object.keys(dispenseData).length} dispense events.`);\n            for (const key in dispenseData) {\n                const event: EventFromFirestore = dispenseData[key];\n                if (event.serverTimestamp) {\n                    events.push({\n                        id: key,\n                        type: 'dispensed',\n                        message: event.message,\n                        timestamp: new Date(event.serverTimestamp)\n                    });\n                }\n            }\n        } else {\n            console.log(\"No dispense_events data available\");\n        }\n\n        if (reminderSnapshot.exists()) {\n            const reminderData = reminderSnapshot.val();\n            console.log(`Fetched ${Object.keys(reminderData).length} reminder events.`);\n            for (const key in reminderData) {\n                const event: EventFromFirestore = reminderData[key];\n                if (event.serverTimestamp) {\n                    events.push({\n                        id: key,\n                        type: 'reminder',\n                        message: event.message,\n                        timestamp: new Date(event.serverTimestamp)\n                    });\n                }\n            }\n        } else {\n            console.log(\"No reminders data available\");\n        }\n\n        const sortedEvents = events.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n        console.log(`Successfully processed and sorted ${sortedEvents.length} total events.`);\n        return sortedEvents;\n\n    } catch (error) {\n        console.error(\"Error fetching events from Realtime Database:\", error);\n        return [];\n    }\n}\n\n\nexport async function clearEvents(): Promise<{ success: boolean; error?: string }> {\n    console.log(\"Attempting to clear event history from Realtime Database...\");\n    try {\n        const dbRef = ref(db);\n        await Promise.all([\n            remove(child(dbRef, 'dispense_events')),\n            remove(child(dbRef, 'reminders'))\n        ]);\n        console.log(\"Successfully cleared event history.\");\n        return { success: true };\n    } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';\n        console.error(\"Error clearing event history:\", errorMessage);\n        return { success: false, error: errorMessage };\n    }\n}"],"names":[],"mappings":";;;;;;AAEA;AACA;AAAA;;;;;;AAGO,eAAe;IAClB,QAAQ,GAAG,CAAC;IACZ,IAAI;QACA,MAAM,QAAQ,CAAA,GAAA,qLAAA,CAAA,MAAG,AAAD,EAAE,sHAAA,CAAA,KAAE;QAEpB,MAAM,CAAC,kBAAkB,iBAAiB,GAAG,MAAM,QAAQ,GAAG,CAAC;YAC3D,CAAA,GAAA,qLAAA,CAAA,MAAG,AAAD,EAAE,CAAA,GAAA,qLAAA,CAAA,QAAK,AAAD,EAAE,OAAO;YACjB,CAAA,GAAA,qLAAA,CAAA,MAAG,AAAD,EAAE,CAAA,GAAA,qLAAA,CAAA,QAAK,AAAD,EAAE,OAAO;SACpB;QAED,MAAM,SAAkB,EAAE;QAE1B,IAAI,iBAAiB,MAAM,IAAI;YAC3B,MAAM,eAAe,iBAAiB,GAAG;YACzC,QAAQ,GAAG,CAAC,CAAC,QAAQ,EAAE,OAAO,IAAI,CAAC,cAAc,MAAM,CAAC,iBAAiB,CAAC;YAC1E,IAAK,MAAM,OAAO,aAAc;gBAC5B,MAAM,QAA4B,YAAY,CAAC,IAAI;gBACnD,IAAI,MAAM,eAAe,EAAE;oBACvB,OAAO,IAAI,CAAC;wBACR,IAAI;wBACJ,MAAM;wBACN,SAAS,MAAM,OAAO;wBACtB,WAAW,IAAI,KAAK,MAAM,eAAe;oBAC7C;gBACJ;YACJ;QACJ,OAAO;YACH,QAAQ,GAAG,CAAC;QAChB;QAEA,IAAI,iBAAiB,MAAM,IAAI;YAC3B,MAAM,eAAe,iBAAiB,GAAG;YACzC,QAAQ,GAAG,CAAC,CAAC,QAAQ,EAAE,OAAO,IAAI,CAAC,cAAc,MAAM,CAAC,iBAAiB,CAAC;YAC1E,IAAK,MAAM,OAAO,aAAc;gBAC5B,MAAM,QAA4B,YAAY,CAAC,IAAI;gBACnD,IAAI,MAAM,eAAe,EAAE;oBACvB,OAAO,IAAI,CAAC;wBACR,IAAI;wBACJ,MAAM;wBACN,SAAS,MAAM,OAAO;wBACtB,WAAW,IAAI,KAAK,MAAM,eAAe;oBAC7C;gBACJ;YACJ;QACJ,OAAO;YACH,QAAQ,GAAG,CAAC;QAChB;QAEA,MAAM,eAAe,OAAO,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,SAAS,CAAC,OAAO,KAAK,EAAE,SAAS,CAAC,OAAO;QACtF,QAAQ,GAAG,CAAC,CAAC,kCAAkC,EAAE,aAAa,MAAM,CAAC,cAAc,CAAC;QACpF,OAAO;IAEX,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,iDAAiD;QAC/D,OAAO,EAAE;IACb;AACJ;AAGO,eAAe;IAClB,QAAQ,GAAG,CAAC;IACZ,IAAI;QACA,MAAM,QAAQ,CAAA,GAAA,qLAAA,CAAA,MAAG,AAAD,EAAE,sHAAA,CAAA,KAAE;QACpB,MAAM,QAAQ,GAAG,CAAC;YACd,CAAA,GAAA,qLAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,qLAAA,CAAA,QAAK,AAAD,EAAE,OAAO;YACpB,CAAA,GAAA,qLAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,qLAAA,CAAA,QAAK,AAAD,EAAE,OAAO;SACvB;QACD,QAAQ,GAAG,CAAC;QACZ,OAAO;YAAE,SAAS;QAAK;IAC3B,EAAE,OAAO,OAAO;QACZ,MAAM,eAAe,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC9D,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO;YAAE,SAAS;YAAO,OAAO;QAAa;IACjD;AACJ;;;IA1EsB;IA2DA;;AA3DA,+OAAA;AA2DA,+OAAA","debugId":null}},
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":["file:///C:/xampp/htdocs/MediAlert/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getEvents as '00ede71edbfc75ff113f81903a76723ae0f2c1d409'} from 'ACTIONS_MODULE0'\nexport {clearEvents as '00803cd8da634459c2cc1b81799e2f964d8a099f1f'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 246, "column": 0}, "map": {"version":3,"sources":["file:///C:/xampp/htdocs/MediAlert/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":["file:///C:/xampp/htdocs/MediAlert/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 274, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}